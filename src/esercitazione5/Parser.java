
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package esercitazione5;

import java_cup.runtime.*;
import esercitazione5.syntax.*;
import esercitazione5.syntax.const_.*;
import esercitazione5.syntax.decl.*;
import esercitazione5.syntax.expr.*;
import esercitazione5.syntax.idinit.*;
import esercitazione5.syntax.statement.*;
import esercitazione5.syntax.type.*;
import java.util.ArrayList;
import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return ParserSym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\127\000\002\002\004\000\002\002\005\000\002\003" +
    "\004\000\002\003\004\000\002\003\002\000\002\004\004" +
    "\000\002\005\005\000\002\005\005\000\002\007\003\000" +
    "\002\007\003\000\002\007\003\000\002\007\003\000\002" +
    "\007\003\000\002\011\003\000\002\011\005\000\002\011" +
    "\005\000\002\011\007\000\002\012\005\000\002\012\007" +
    "\000\002\014\003\000\002\014\003\000\002\014\003\000" +
    "\002\014\003\000\002\014\003\000\002\014\003\000\002" +
    "\006\012\000\002\010\003\000\002\010\003\000\002\017" +
    "\006\000\002\017\005\000\002\015\002\000\002\015\003" +
    "\000\002\016\003\000\002\016\005\000\002\022\004\000" +
    "\002\022\005\000\002\020\002\000\002\020\004\000\002" +
    "\021\003\000\002\021\004\000\002\024\003\000\002\024" +
    "\003\000\002\024\004\000\002\024\004\000\002\024\004" +
    "\000\002\024\003\000\002\024\004\000\002\024\005\000" +
    "\002\024\004\000\002\025\007\000\002\035\002\000\002" +
    "\035\004\000\002\032\006\000\002\026\012\000\002\027" +
    "\005\000\002\027\004\000\002\023\003\000\002\023\005" +
    "\000\002\030\006\000\002\030\006\000\002\031\005\000" +
    "\002\033\006\000\002\033\005\000\002\034\006\000\002" +
    "\034\005\000\002\036\003\000\002\036\005\000\002\013" +
    "\003\000\002\013\003\000\002\013\003\000\002\013\005" +
    "\000\002\013\005\000\002\013\005\000\002\013\005\000" +
    "\002\013\005\000\002\013\005\000\002\013\005\000\002" +
    "\013\005\000\002\013\005\000\002\013\005\000\002\013" +
    "\005\000\002\013\005\000\002\013\005\000\002\013\005" +
    "\000\002\013\004\000\002\013\004\000\002\013\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\250\000\022\004\015\015\ufffd\021\013\022\005\023" +
    "\016\024\012\025\007\026\017\001\002\000\004\061\242" +
    "\001\002\000\006\035\ufff9\061\ufff9\001\002\000\004\002" +
    "\241\001\002\000\006\035\ufff8\061\ufff8\001\002\000\024" +
    "\002\ufffd\004\015\015\ufffd\021\013\022\005\023\016\024" +
    "\012\025\007\026\017\001\002\000\024\002\ufffd\004\015" +
    "\015\ufffd\021\013\022\005\023\016\024\012\025\007\026" +
    "\017\001\002\000\006\035\ufff6\061\ufff6\001\002\000\004" +
    "\061\226\001\002\000\004\015\222\001\002\000\004\061" +
    "\020\001\002\000\006\035\ufff7\061\ufff7\001\002\000\006" +
    "\035\ufff5\061\ufff5\001\002\000\004\033\021\001\002\000" +
    "\020\005\026\022\005\023\016\024\012\025\007\026\017" +
    "\034\uffe3\001\002\000\004\034\037\001\002\000\004\061" +
    "\030\001\002\000\006\020\uffe1\034\uffe1\001\002\000\006" +
    "\020\034\034\uffe2\001\002\000\014\022\005\023\016\024" +
    "\012\025\007\026\017\001\002\000\004\061\030\001\002" +
    "\000\010\017\uffc9\020\uffc9\034\uffc9\001\002\000\010\017" +
    "\032\020\uffde\034\uffde\001\002\000\004\061\033\001\002" +
    "\000\014\017\uffc8\020\uffc8\030\uffc8\034\uffc8\040\uffc8\001" +
    "\002\000\016\005\026\022\005\023\016\024\012\025\007" +
    "\026\017\001\002\000\006\020\uffe0\034\uffe0\001\002\000" +
    "\010\017\032\020\uffdf\034\uffdf\001\002\000\004\037\040" +
    "\001\002\000\016\022\005\023\016\024\012\025\007\026" +
    "\017\027\043\001\002\000\004\035\044\001\002\000\004" +
    "\035\uffe7\001\002\000\004\035\uffe6\001\002\000\034\006" +
    "\uffdd\007\uffdd\012\uffdd\021\013\022\005\023\016\024\012" +
    "\025\007\026\017\033\uffdd\036\uffdd\041\uffdd\061\uffdd\001" +
    "\002\000\024\002\uffe8\004\uffe8\015\uffe8\021\uffe8\022\uffe8" +
    "\023\uffe8\024\uffe8\025\uffe8\026\uffe8\001\002\000\020\006" +
    "\052\007\056\012\051\033\054\036\071\041\067\061\062" +
    "\001\002\000\034\006\uffdd\007\uffdd\012\uffdd\021\013\022" +
    "\005\023\016\024\012\025\007\026\017\033\uffdd\036\uffdd" +
    "\041\uffdd\061\uffdd\001\002\000\020\006\uffdc\007\uffdc\012" +
    "\uffdc\033\uffdc\036\uffdc\041\uffdc\061\uffdc\001\002\000\026" +
    "\033\100\043\072\060\106\061\104\062\077\063\103\064" +
    "\073\065\105\066\076\067\102\001\002\000\004\061\210" +
    "\001\002\000\020\006\uffd4\007\uffd4\012\uffd4\033\uffd4\036" +
    "\uffd4\041\uffd4\061\uffd4\001\002\000\026\033\100\043\072" +
    "\060\106\061\104\062\077\063\103\064\073\065\105\066" +
    "\076\067\102\001\002\000\020\006\uffd9\007\uffd9\012\uffd9" +
    "\033\uffd9\036\uffd9\041\uffd9\061\uffd9\001\002\000\026\033" +
    "\100\043\072\060\106\061\104\062\077\063\103\064\073" +
    "\065\105\066\076\067\102\001\002\000\004\016\175\001" +
    "\002\000\004\016\174\001\002\000\004\036\173\001\002" +
    "\000\012\017\uffc9\030\uffc9\033\167\040\uffc9\001\002\000" +
    "\010\017\032\030\163\040\164\001\002\000\004\016\162" +
    "\001\002\000\020\006\052\007\056\012\051\033\054\036" +
    "\uffdb\041\067\061\062\001\002\000\004\016\160\001\002" +
    "\000\030\016\101\033\100\043\072\060\106\061\104\062" +
    "\077\063\103\064\073\065\105\066\076\067\102\001\002" +
    "\000\020\006\uffd8\007\uffd8\012\uffd8\033\uffd8\036\uffd8\041" +
    "\uffd8\061\uffd8\001\002\000\044\002\uffe4\004\uffe4\006\uffe4" +
    "\007\uffe4\010\uffe4\012\uffe4\015\uffe4\021\uffe4\022\uffe4\023" +
    "\uffe4\024\uffe4\025\uffe4\026\uffe4\033\uffe4\036\uffe4\041\uffe4" +
    "\061\uffe4\001\002\000\026\033\100\043\072\060\106\061" +
    "\104\062\077\063\103\064\073\065\105\066\076\067\102" +
    "\001\002\000\052\011\uffed\013\uffed\014\uffed\016\uffed\017" +
    "\uffed\034\uffed\042\uffed\043\uffed\044\uffed\045\uffed\046\uffed" +
    "\047\uffed\050\uffed\051\uffed\052\uffed\053\uffed\054\uffed\055" +
    "\uffed\056\uffed\057\uffed\001\002\000\052\011\uffbe\013\uffbe" +
    "\014\uffbe\016\uffbe\017\uffbe\034\uffbe\042\uffbe\043\uffbe\044" +
    "\uffbe\045\uffbe\046\uffbe\047\uffbe\050\uffbe\051\uffbe\052\uffbe" +
    "\053\uffbe\054\uffbe\055\uffbe\056\uffbe\057\uffbe\001\002\000" +
    "\040\016\156\042\115\043\111\044\122\045\121\046\113" +
    "\047\124\050\116\051\123\052\125\053\117\054\120\055" +
    "\114\056\112\057\126\001\002\000\052\011\uffec\013\uffec" +
    "\014\uffec\016\uffec\017\uffec\034\uffec\042\uffec\043\uffec\044" +
    "\uffec\045\uffec\046\uffec\047\uffec\050\uffec\051\uffec\052\uffec" +
    "\053\uffec\054\uffec\055\uffec\056\uffec\057\uffec\001\002\000" +
    "\052\011\uffea\013\uffea\014\uffea\016\uffea\017\uffea\034\uffea" +
    "\042\uffea\043\uffea\044\uffea\045\uffea\046\uffea\047\uffea\050" +
    "\uffea\051\uffea\052\uffea\053\uffea\054\uffea\055\uffea\056\uffea" +
    "\057\uffea\001\002\000\026\033\100\043\072\060\106\061" +
    "\104\062\077\063\103\064\073\065\105\066\076\067\102" +
    "\001\002\000\020\006\uffd1\007\uffd1\012\uffd1\033\uffd1\036" +
    "\uffd1\041\uffd1\061\uffd1\001\002\000\052\011\uffeb\013\uffeb" +
    "\014\uffeb\016\uffeb\017\uffeb\034\uffeb\042\uffeb\043\uffeb\044" +
    "\uffeb\045\uffeb\046\uffeb\047\uffeb\050\uffeb\051\uffeb\052\uffeb" +
    "\053\uffeb\054\uffeb\055\uffeb\056\uffeb\057\uffeb\001\002\000" +
    "\052\011\uffee\013\uffee\014\uffee\016\uffee\017\uffee\034\uffee" +
    "\042\uffee\043\uffee\044\uffee\045\uffee\046\uffee\047\uffee\050" +
    "\uffee\051\uffee\052\uffee\053\uffee\054\uffee\055\uffee\056\uffee" +
    "\057\uffee\001\002\000\054\011\uffbd\013\uffbd\014\uffbd\016" +
    "\uffbd\017\uffbd\033\145\034\uffbd\042\uffbd\043\uffbd\044\uffbd" +
    "\045\uffbd\046\uffbd\047\uffbd\050\uffbd\051\uffbd\052\uffbd\053" +
    "\uffbd\054\uffbd\055\uffbd\056\uffbd\057\uffbd\001\002\000\052" +
    "\011\uffe9\013\uffe9\014\uffe9\016\uffe9\017\uffe9\034\uffe9\042" +
    "\uffe9\043\uffe9\044\uffe9\045\uffe9\046\uffe9\047\uffe9\050\uffe9" +
    "\051\uffe9\052\uffe9\053\uffe9\054\uffe9\055\uffe9\056\uffe9\057" +
    "\uffe9\001\002\000\026\033\100\043\072\060\106\061\104" +
    "\062\077\063\103\064\073\065\105\066\076\067\102\001" +
    "\002\000\052\011\uffbc\013\uffbc\014\uffbc\016\uffbc\017\uffbc" +
    "\034\uffbc\042\uffbc\043\uffbc\044\uffbc\045\uffbc\046\uffbc\047" +
    "\uffbc\050\uffbc\051\uffbc\052\uffbc\053\uffbc\054\uffbc\055\uffbc" +
    "\056\uffbc\057\uffbc\001\002\000\052\011\uffac\013\uffac\014" +
    "\uffac\016\uffac\017\uffac\034\uffac\042\115\043\111\044\122" +
    "\045\121\046\113\047\124\050\116\051\123\052\125\053" +
    "\117\054\120\055\114\056\uffac\057\uffac\001\002\000\026" +
    "\033\100\043\072\060\106\061\104\062\077\063\103\064" +
    "\073\065\105\066\076\067\102\001\002\000\026\033\100" +
    "\043\072\060\106\061\104\062\077\063\103\064\073\065" +
    "\105\066\076\067\102\001\002\000\026\033\100\043\072" +
    "\060\106\061\104\062\077\063\103\064\073\065\105\066" +
    "\076\067\102\001\002\000\026\033\100\043\072\060\106" +
    "\061\104\062\077\063\103\064\073\065\105\066\076\067" +
    "\102\001\002\000\026\033\100\043\072\060\106\061\104" +
    "\062\077\063\103\064\073\065\105\066\076\067\102\001" +
    "\002\000\026\033\100\043\072\060\106\061\104\062\077" +
    "\063\103\064\073\065\105\066\076\067\102\001\002\000" +
    "\026\033\100\043\072\060\106\061\104\062\077\063\103" +
    "\064\073\065\105\066\076\067\102\001\002\000\026\033" +
    "\100\043\072\060\106\061\104\062\077\063\103\064\073" +
    "\065\105\066\076\067\102\001\002\000\026\033\100\043" +
    "\072\060\106\061\104\062\077\063\103\064\073\065\105" +
    "\066\076\067\102\001\002\000\026\033\100\043\072\060" +
    "\106\061\104\062\077\063\103\064\073\065\105\066\076" +
    "\067\102\001\002\000\026\033\100\043\072\060\106\061" +
    "\104\062\077\063\103\064\073\065\105\066\076\067\102" +
    "\001\002\000\026\033\100\043\072\060\106\061\104\062" +
    "\077\063\103\064\073\065\105\066\076\067\102\001\002" +
    "\000\026\033\100\043\072\060\106\061\104\062\077\063" +
    "\103\064\073\065\105\066\076\067\102\001\002\000\026" +
    "\033\100\043\072\060\106\061\104\062\077\063\103\064" +
    "\073\065\105\066\076\067\102\001\002\000\052\011\uffb6" +
    "\013\uffb6\014\uffb6\016\uffb6\017\uffb6\034\uffb6\042\115\043" +
    "\111\044\122\045\121\046\113\047\124\050\116\051\123" +
    "\052\125\053\117\054\120\055\114\056\112\057\uffb6\001" +
    "\002\000\036\011\uffb1\013\uffb1\014\uffb1\016\uffb1\017\uffb1" +
    "\034\uffb1\042\115\043\111\044\122\045\121\046\113\047" +
    "\124\056\uffb1\057\uffb1\001\002\000\052\011\uffb5\013\uffb5" +
    "\014\uffb5\016\uffb5\017\uffb5\034\uffb5\042\115\043\111\044" +
    "\122\045\121\046\113\047\uffb5\050\uffb5\051\uffb5\052\uffb5" +
    "\053\uffb5\054\uffb5\055\uffb5\056\uffb5\057\uffb5\001\002\000" +
    "\036\011\uffae\013\uffae\014\uffae\016\uffae\017\uffae\034\uffae" +
    "\042\115\043\111\044\122\045\121\046\113\047\124\056" +
    "\uffae\057\uffae\001\002\000\052\011\uffb9\013\uffb9\014\uffb9" +
    "\016\uffb9\017\uffb9\034\uffb9\042\uffb9\043\uffb9\044\uffb9\045" +
    "\uffb9\046\113\047\uffb9\050\uffb9\051\uffb9\052\uffb9\053\uffb9" +
    "\054\uffb9\055\uffb9\056\uffb9\057\uffb9\001\002\000\052\011" +
    "\uffb8\013\uffb8\014\uffb8\016\uffb8\017\uffb8\034\uffb8\042\uffb8" +
    "\043\uffb8\044\uffb8\045\uffb8\046\113\047\uffb8\050\uffb8\051" +
    "\uffb8\052\uffb8\053\uffb8\054\uffb8\055\uffb8\056\uffb8\057\uffb8" +
    "\001\002\000\036\011\uffb3\013\uffb3\014\uffb3\016\uffb3\017" +
    "\uffb3\034\uffb3\042\115\043\111\044\122\045\121\046\113" +
    "\047\124\056\uffb3\057\uffb3\001\002\000\036\011\uffb0\013" +
    "\uffb0\014\uffb0\016\uffb0\017\uffb0\034\uffb0\042\115\043\111" +
    "\044\122\045\121\046\113\047\124\056\uffb0\057\uffb0\001" +
    "\002\000\036\011\uffaf\013\uffaf\014\uffaf\016\uffaf\017\uffaf" +
    "\034\uffaf\042\115\043\111\044\122\045\121\046\113\047" +
    "\124\056\uffaf\057\uffaf\001\002\000\052\011\uffbb\013\uffbb" +
    "\014\uffbb\016\uffbb\017\uffbb\034\uffbb\042\uffbb\043\uffbb\044" +
    "\122\045\121\046\113\047\uffbb\050\uffbb\051\uffbb\052\uffbb" +
    "\053\uffbb\054\uffbb\055\uffbb\056\uffbb\057\uffbb\001\002\000" +
    "\036\011\uffb2\013\uffb2\014\uffb2\016\uffb2\017\uffb2\034\uffb2" +
    "\042\115\043\111\044\122\045\121\046\113\047\124\056" +
    "\uffb2\057\uffb2\001\002\000\052\011\uffb4\013\uffb4\014\uffb4" +
    "\016\uffb4\017\uffb4\034\uffb4\042\uffb4\043\uffb4\044\uffb4\045" +
    "\uffb4\046\uffb4\047\uffb4\050\uffb4\051\uffb4\052\uffb4\053\uffb4" +
    "\054\uffb4\055\uffb4\056\uffb4\057\uffb4\001\002\000\052\011" +
    "\uffb7\013\uffb7\014\uffb7\016\uffb7\017\uffb7\034\uffb7\042\115" +
    "\043\111\044\122\045\121\046\113\047\124\050\116\051" +
    "\123\052\125\053\117\054\120\055\114\056\uffb7\057\uffb7" +
    "\001\002\000\052\011\uffba\013\uffba\014\uffba\016\uffba\017" +
    "\uffba\034\uffba\042\uffba\043\uffba\044\122\045\121\046\113" +
    "\047\uffba\050\uffba\051\uffba\052\uffba\053\uffba\054\uffba\055" +
    "\uffba\056\uffba\057\uffba\001\002\000\030\033\100\034\150" +
    "\043\072\060\106\061\104\062\077\063\103\064\073\065" +
    "\105\066\076\067\102\001\002\000\044\016\uffc0\017\152" +
    "\034\uffc0\042\115\043\111\044\122\045\121\046\113\047" +
    "\124\050\116\051\123\052\125\053\117\054\120\055\114" +
    "\056\112\057\126\001\002\000\004\034\151\001\002\000" +
    "\052\011\uffc1\013\uffc1\014\uffc1\016\uffc1\017\uffc1\034\uffc1" +
    "\042\uffc1\043\uffc1\044\uffc1\045\uffc1\046\uffc1\047\uffc1\050" +
    "\uffc1\051\uffc1\052\uffc1\053\uffc1\054\uffc1\055\uffc1\056\uffc1" +
    "\057\uffc1\001\002\000\052\011\uffc2\013\uffc2\014\uffc2\016" +
    "\uffc2\017\uffc2\034\uffc2\042\uffc2\043\uffc2\044\uffc2\045\uffc2" +
    "\046\uffc2\047\uffc2\050\uffc2\051\uffc2\052\uffc2\053\uffc2\054" +
    "\uffc2\055\uffc2\056\uffc2\057\uffc2\001\002\000\026\033\100" +
    "\043\072\060\106\061\104\062\077\063\103\064\073\065" +
    "\105\066\076\067\102\001\002\000\006\016\uffbf\034\uffbf" +
    "\001\002\000\040\034\155\042\115\043\111\044\122\045" +
    "\121\046\113\047\124\050\116\051\123\052\125\053\117" +
    "\054\120\055\114\056\112\057\126\001\002\000\052\011" +
    "\uffab\013\uffab\014\uffab\016\uffab\017\uffab\034\uffab\042\uffab" +
    "\043\uffab\044\uffab\045\uffab\046\uffab\047\uffab\050\uffab\051" +
    "\uffab\052\uffab\053\uffab\054\uffab\055\uffab\056\uffab\057\uffab" +
    "\001\002\000\020\006\uffd2\007\uffd2\012\uffd2\033\uffd2\036" +
    "\uffd2\041\uffd2\061\uffd2\001\002\000\052\011\uffad\013\uffad" +
    "\014\uffad\016\uffad\017\uffad\034\uffad\042\uffad\043\uffad\044" +
    "\122\045\121\046\113\047\uffad\050\uffad\051\uffad\052\uffad" +
    "\053\uffad\054\uffad\055\uffad\056\uffad\057\uffad\001\002\000" +
    "\020\006\uffd7\007\uffd7\012\uffd7\033\uffd7\036\uffd7\041\uffd7" +
    "\061\uffd7\001\002\000\004\036\uffda\001\002\000\020\006" +
    "\uffd6\007\uffd6\012\uffd6\033\uffd6\036\uffd6\041\uffd6\061\uffd6" +
    "\001\002\000\006\016\uffca\062\166\001\002\000\026\033" +
    "\100\043\072\060\106\061\104\062\077\063\103\064\073" +
    "\065\105\066\076\067\102\001\002\000\004\016\uffc5\001" +
    "\002\000\004\016\uffcb\001\002\000\030\033\100\034\171" +
    "\043\072\060\106\061\104\062\077\063\103\064\073\065" +
    "\105\066\076\067\102\001\002\000\004\034\172\001\002" +
    "\000\004\016\uffc3\001\002\000\004\016\uffc4\001\002\000" +
    "\044\002\uffe5\004\uffe5\006\uffe5\007\uffe5\010\uffe5\012\uffe5" +
    "\015\uffe5\021\uffe5\022\uffe5\023\uffe5\024\uffe5\025\uffe5\026" +
    "\uffe5\033\uffe5\036\uffe5\041\uffe5\061\uffe5\001\002\000\020" +
    "\006\uffd5\007\uffd5\012\uffd5\033\uffd5\036\uffd5\041\uffd5\061" +
    "\uffd5\001\002\000\020\006\uffd3\007\uffd3\012\uffd3\033\uffd3" +
    "\036\uffd3\041\uffd3\061\uffd3\001\002\000\040\011\177\042" +
    "\115\043\111\044\122\045\121\046\113\047\124\050\116" +
    "\051\123\052\125\053\117\054\120\055\114\056\112\057" +
    "\126\001\002\000\004\035\044\001\002\000\022\006\uffcf" +
    "\007\uffcf\010\201\012\uffcf\033\uffcf\036\uffcf\041\uffcf\061" +
    "\uffcf\001\002\000\004\035\044\001\002\000\020\006\uffd0" +
    "\007\uffd0\012\uffd0\033\uffd0\036\uffd0\041\uffd0\061\uffd0\001" +
    "\002\000\020\006\uffce\007\uffce\012\uffce\033\uffce\036\uffce" +
    "\041\uffce\061\uffce\001\002\000\004\034\205\001\002\000" +
    "\006\031\206\032\207\001\002\000\004\016\uffc7\001\002" +
    "\000\004\016\uffc6\001\002\000\004\040\211\001\002\000" +
    "\026\033\100\043\072\060\106\061\104\062\077\063\103" +
    "\064\073\065\105\066\076\067\102\001\002\000\040\013" +
    "\213\042\115\043\111\044\122\045\121\046\113\047\124" +
    "\050\116\051\123\052\125\053\117\054\120\055\114\056" +
    "\112\057\126\001\002\000\026\033\100\043\072\060\106" +
    "\061\104\062\077\063\103\064\073\065\105\066\076\067" +
    "\102\001\002\000\040\014\215\042\115\043\111\044\122" +
    "\045\121\046\113\047\124\050\116\051\123\052\125\053" +
    "\117\054\120\055\114\056\112\057\126\001\002\000\004" +
    "\035\044\001\002\000\020\006\uffcc\007\uffcc\012\uffcc\033" +
    "\uffcc\036\uffcc\041\uffcc\061\uffcc\001\002\000\040\014\220" +
    "\042\115\043\111\044\122\045\121\046\113\047\124\050" +
    "\116\051\123\052\125\053\117\054\120\055\114\056\112" +
    "\057\126\001\002\000\004\035\044\001\002\000\020\006" +
    "\uffcd\007\uffcd\012\uffcd\033\uffcd\036\uffcd\041\uffcd\061\uffcd" +
    "\001\002\000\004\004\015\001\002\000\022\002\ufffd\004" +
    "\015\021\013\022\005\023\016\024\012\025\007\026\017" +
    "\001\002\000\004\002\000\001\002\000\022\002\ufffc\004" +
    "\ufffc\021\ufffc\022\ufffc\023\ufffc\024\ufffc\025\ufffc\026\ufffc" +
    "\001\002\000\004\040\235\001\002\000\006\016\231\017" +
    "\230\001\002\000\004\061\232\001\002\000\042\002\ufffa" +
    "\004\ufffa\006\ufffa\007\ufffa\012\ufffa\015\ufffa\021\ufffa\022" +
    "\ufffa\023\ufffa\024\ufffa\025\ufffa\026\ufffa\033\ufffa\036\ufffa" +
    "\041\ufffa\061\ufffa\001\002\000\004\040\233\001\002\000" +
    "\016\062\077\063\103\064\073\065\105\066\076\067\102" +
    "\001\002\000\006\016\uffef\017\uffef\001\002\000\016\062" +
    "\077\063\103\064\073\065\105\066\076\067\102\001\002" +
    "\000\006\016\ufff0\017\ufff0\001\002\000\006\002\uffff\015" +
    "\uffff\001\002\000\006\002\ufffe\015\ufffe\001\002\000\004" +
    "\002\001\001\002\000\010\016\ufff4\017\ufff4\040\251\001" +
    "\002\000\006\016\245\017\244\001\002\000\004\061\246" +
    "\001\002\000\042\002\ufffb\004\ufffb\006\ufffb\007\ufffb\012" +
    "\ufffb\015\ufffb\021\ufffb\022\ufffb\023\ufffb\024\ufffb\025\ufffb" +
    "\026\ufffb\033\ufffb\036\ufffb\041\ufffb\061\ufffb\001\002\000" +
    "\010\016\ufff3\017\ufff3\040\247\001\002\000\026\033\100" +
    "\043\072\060\106\061\104\062\077\063\103\064\073\065" +
    "\105\066\076\067\102\001\002\000\042\016\ufff1\017\ufff1" +
    "\042\115\043\111\044\122\045\121\046\113\047\124\050" +
    "\116\051\123\052\125\053\117\054\120\055\114\056\112" +
    "\057\126\001\002\000\026\033\100\043\072\060\106\061" +
    "\104\062\077\063\103\064\073\065\105\066\076\067\102" +
    "\001\002\000\042\016\ufff2\017\ufff2\042\115\043\111\044" +
    "\122\045\121\046\113\047\124\050\116\051\123\052\125" +
    "\053\117\054\120\055\114\056\112\057\126\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\250\000\014\002\005\003\013\005\010\006\007\007" +
    "\003\001\001\000\004\011\242\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\003\237\005" +
    "\010\006\007\007\003\001\001\000\012\003\236\005\010" +
    "\006\007\007\003\001\001\000\002\001\001\000\004\012" +
    "\226\001\001\000\004\004\222\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\007\022\015\021\016\024\022\023\001\001\000\002" +
    "\001\001\000\004\023\035\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\007\026\001\001\000\004\023\030" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\007\022\022\034\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\007\041\010\040\001\001\000\004\017\044\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\005\046\007" +
    "\003\020\045\001\001\000\002\001\001\000\026\021\060" +
    "\023\062\024\064\025\054\026\067\027\065\030\063\031" +
    "\057\032\052\033\056\001\001\000\010\005\046\007\003" +
    "\020\047\001\001\000\002\001\001\000\010\013\216\014" +
    "\073\034\106\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\013\145\014\073\034\106\036\203\001\001\000" +
    "\002\001\001\000\010\013\175\014\073\034\106\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\021\160\023\062\024\064\025\054\026\067\027\065\030" +
    "\063\031\057\032\052\033\056\001\001\000\002\001\001" +
    "\000\010\013\074\014\073\034\106\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\013\156\014\073\034\106" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\013\153" +
    "\014\073\034\106\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\013\107\014\073\034\106\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\013\143\014\073\034\106" +
    "\001\001\000\010\013\142\014\073\034\106\001\001\000" +
    "\010\013\141\014\073\034\106\001\001\000\010\013\140" +
    "\014\073\034\106\001\001\000\010\013\137\014\073\034" +
    "\106\001\001\000\010\013\136\014\073\034\106\001\001" +
    "\000\010\013\135\014\073\034\106\001\001\000\010\013" +
    "\134\014\073\034\106\001\001\000\010\013\133\014\073" +
    "\034\106\001\001\000\010\013\132\014\073\034\106\001" +
    "\001\000\010\013\131\014\073\034\106\001\001\000\010" +
    "\013\130\014\073\034\106\001\001\000\010\013\127\014" +
    "\073\034\106\001\001\000\010\013\126\014\073\034\106" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\013\145\014\073\034" +
    "\106\036\146\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\013\145\014" +
    "\073\034\106\036\152\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\013\145\014\073\034\106\036" +
    "\164\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\013\145\014\073\034\106\036\167\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\017\177\001\001\000\004\035\201\001\001\000\004" +
    "\017\202\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\013\211\014\073\034" +
    "\106\001\001\000\002\001\001\000\010\013\213\014\073" +
    "\034\106\001\001\000\002\001\001\000\004\017\215\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\017\220" +
    "\001\001\000\002\001\001\000\004\006\224\001\001\000" +
    "\012\003\223\005\010\006\007\007\003\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\014\233\001\001\000\002\001\001\000\004\014" +
    "\235\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\013\247\014\073\034\106\001\001\000\002\001" +
    "\001\000\010\013\251\014\073\034\106\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public void report_error(String msg, Object info) {
      Symbol sym = (Symbol)info;
      System.out.println(msg + ": " + symbl_name_from_id(sym.sym));
    }

    public void syntax_error(Symbol cur_token) {
      System.out.println("<Syntax error: " + symbl_name_from_id(cur_token.sym) + ">"
      + "\n\t Detected at line: " + (cur_token.left + 1) + "; column: " + (cur_token.right + 1));
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ProgramOP start_val = (ProgramOP)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Program ::= DeclList MainFunDecl DeclList 
            {
              ProgramOP RESULT =null;
		int declList1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int declList1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList<AbstractDecl> declList1 = (ArrayList<AbstractDecl>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int mainFunDeclleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int mainFunDeclright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		MainFunDeclOP mainFunDecl = (MainFunDeclOP)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int declList2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int declList2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<AbstractDecl> declList2 = (ArrayList<AbstractDecl>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 ArrayList<AbstractDecl> declList = new ArrayList<AbstractDecl>();
       declList.addAll(declList1);
       declList.addAll(declList2);
       RESULT = new ProgramOP(declList, mainFunDecl); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // DeclList ::= VarDecl DeclList 
            {
              ArrayList<AbstractDecl> RESULT =null;
		int varDeclleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int varDeclright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		VarDeclOP varDecl = (VarDeclOP)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int declListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int declListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<AbstractDecl> declList = (ArrayList<AbstractDecl>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ArrayList<AbstractDecl>();
       RESULT.add(varDecl);
       RESULT.addAll(declList);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DeclList",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // DeclList ::= FunDecl DeclList 
            {
              ArrayList<AbstractDecl> RESULT =null;
		int funDeclleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int funDeclright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		FunDeclOP funDecl = (FunDeclOP)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int declListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int declListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<AbstractDecl> declList = (ArrayList<AbstractDecl>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ArrayList<AbstractDecl>();
       RESULT.add(funDecl);
       RESULT.addAll(declList);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DeclList",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // DeclList ::= 
            {
              ArrayList<AbstractDecl> RESULT =null;
		 RESULT = new ArrayList<AbstractDecl>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DeclList",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // MainFunDecl ::= MAIN FunDecl 
            {
              MainFunDeclOP RESULT =null;
		int funDeclleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int funDeclright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		FunDeclOP funDecl = (FunDeclOP)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new MainFunDeclOP(funDecl); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MainFunDecl",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // VarDecl ::= Type IdInitList SEMI 
            {
              VarDeclOP RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		TypeOP type = (TypeOP)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList<AbstractIdInit> idList = (ArrayList<AbstractIdInit>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  RESULT = new VarDeclOP(type, idList); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VarDecl",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // VarDecl ::= VAR IdInitObblList SEMI 
            {
              VarDeclOP RESULT =null;
		int idListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList<AbstractIdInit> idList = (ArrayList<AbstractIdInit>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new VarDeclOP(new TypeOP("var"), idList); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VarDecl",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Type ::= INT 
            {
              TypeOP RESULT =null;
		 RESULT = new TypeOP("integer"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Type ::= BOOL 
            {
              TypeOP RESULT =null;
		 RESULT = new TypeOP("bool"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Type ::= FLOAT 
            {
              TypeOP RESULT =null;
		 RESULT = new TypeOP("float"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Type ::= STRING 
            {
              TypeOP RESULT =null;
		 RESULT = new TypeOP("string"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Type ::= CHAR 
            {
              TypeOP RESULT =null;
		 RESULT = new TypeOP("char"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // IdInitList ::= ID 
            {
              ArrayList<AbstractIdInit> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		int id = (int)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ArrayList<AbstractIdInit>();
                        IdInitOP idInitOP = new IdInitOP(new Identifier(id));
                        idInitOP.getId().setLine(idleft);
                        RESULT.add(idInitOP);
                     
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IdInitList",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // IdInitList ::= IdInitList COMMA ID 
            {
              ArrayList<AbstractIdInit> RESULT =null;
		int idInitListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idInitListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList<AbstractIdInit> idInitList = (ArrayList<AbstractIdInit>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		int id = (int)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ArrayList<AbstractIdInit>();
                                                    IdInitOP idInitOP = new IdInitOP(new Identifier(id));
                                                    idInitOP.getId().setLine(idleft);
                                                    RESULT.addAll(idInitList);
                                                    RESULT.add(idInitOP);
                                                 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IdInitList",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // IdInitList ::= ID ASSIGN Expr 
            {
              ArrayList<AbstractIdInit> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		int id = (int)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExprOP expr = (ExprOP)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ArrayList<AbstractIdInit>();
                                         IdInitOP idInitOP = new IdInitOP(new Identifier(id), expr);
                                         idInitOP.getId().setLine(idleft);
                                         idInitOP.getExpr().setLine(exprleft);
                                         RESULT.add(idInitOP);
                                      
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IdInitList",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // IdInitList ::= IdInitList COMMA ID ASSIGN Expr 
            {
              ArrayList<AbstractIdInit> RESULT =null;
		int idInitListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int idInitListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		ArrayList<AbstractIdInit> idInitList = (ArrayList<AbstractIdInit>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		int id = (int)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExprOP expr = (ExprOP)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ArrayList<AbstractIdInit>();
                                                                     IdInitOP idInitOP = new IdInitOP(new Identifier(id), expr);
                                                                     idInitOP.getId().setLine(idleft);
                                                                     idInitOP.getExpr().setLine(exprleft);
                                                                     RESULT.addAll(idInitList);
                                                                     RESULT.add(idInitOP);
                                                                  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IdInitList",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // IdInitObblList ::= ID ASSIGN Const 
            {
              ArrayList<AbstractIdInit> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		int id = (int)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AbstractConst c = (AbstractConst)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ArrayList<AbstractIdInit>();
                                           IdInitObblOP idInitOP = new IdInitObblOP(new Identifier(id), c);
                                           idInitOP.getId().setLine(idleft);
                                           RESULT.add(idInitOP);
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IdInitObblList",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // IdInitObblList ::= IdInitObblList COMMA ID ASSIGN Const 
            {
              ArrayList<AbstractIdInit> RESULT =null;
		int idInitListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int idInitListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		ArrayList<AbstractIdInit> idInitList = (ArrayList<AbstractIdInit>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		int id = (int)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AbstractConst c = (AbstractConst)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ArrayList<AbstractIdInit>();
                                                                           IdInitObblOP idInitOP = new IdInitObblOP(new Identifier(id), c);
                                                                           idInitOP.getId().setLine(idleft);
                                                                           RESULT.addAll(idInitList);
                                                                           RESULT.add(idInitOP);
                                                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IdInitObblList",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Const ::= INTEGER_CONST 
            {
              AbstractConst RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		int value = (int)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new IntegerConst(value); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Const",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Const ::= FLOAT_CONST 
            {
              AbstractConst RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		float value = (float)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new FloatConst(value); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Const",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Const ::= TRUE 
            {
              AbstractConst RESULT =null;
		 RESULT = new BooleanConst(true); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Const",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Const ::= FALSE 
            {
              AbstractConst RESULT =null;
		 RESULT = new BooleanConst(false); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Const",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Const ::= STRING_CONST 
            {
              AbstractConst RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new StringConst(value); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Const",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Const ::= CHAR_CONST 
            {
              AbstractConst RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		char value = (char)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new CharConst(value); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Const",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // FunDecl ::= DEF ID LPAR ParamDeclList RPAR COLON TypeOrVoid Body 
            {
              FunDeclOP RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		int id = (int)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int paramDeclListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int paramDeclListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		ArrayList<ParDeclOP> paramDeclList = (ArrayList<ParDeclOP>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		TypeOP type = (TypeOP)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		BodyOP body = (BodyOP)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 FunDeclOP funDeclOP = new FunDeclOP(new Identifier(id), paramDeclList, type, body);
               funDeclOP.getId().setLine(idleft);
               RESULT = funDeclOP;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FunDecl",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // TypeOrVoid ::= Type 
            {
              TypeOP RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TypeOP type = (TypeOP)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = type; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeOrVoid",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // TypeOrVoid ::= VOID 
            {
              TypeOP RESULT =null;
		 RESULT = new TypeOP("void"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeOrVoid",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Body ::= LBRAC VarDeclList StatList RBRAC 
            {
              BodyOP RESULT =null;
		int varDeclListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int varDeclListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList<VarDeclOP> varDeclList = (ArrayList<VarDeclOP>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int statListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int statListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList<Statement> statList = (ArrayList<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new BodyOP(varDeclList, statList); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Body",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Body ::= LBRAC VarDeclList RBRAC 
            {
              BodyOP RESULT =null;
		int varDeclListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int varDeclListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList<VarDeclOP> varDeclList = (ArrayList<VarDeclOP>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new BodyOP(varDeclList); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Body",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ParamDeclList ::= 
            {
              ArrayList<ParDeclOP> RESULT =null;
		 RESULT = new ArrayList<ParDeclOP>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ParamDeclList",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ParamDeclList ::= NonEmptyParamDeclList 
            {
              ArrayList<ParDeclOP> RESULT =null;
		int paramListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int paramListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<ParDeclOP> paramList = (ArrayList<ParDeclOP>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = paramList; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ParamDeclList",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // NonEmptyParamDeclList ::= ParDecl 
            {
              ArrayList<ParDeclOP> RESULT =null;
		int paramleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ParDeclOP param = (ParDeclOP)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                           RESULT = new ArrayList<ParDeclOP>();
                                           RESULT.add(param);
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NonEmptyParamDeclList",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // NonEmptyParamDeclList ::= NonEmptyParamDeclList PIPE ParDecl 
            {
              ArrayList<ParDeclOP> RESULT =null;
		int paramListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int paramListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList<ParDeclOP> paramList = (ArrayList<ParDeclOP>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int paramleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ParDeclOP param = (ParDeclOP)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                                                               RESULT = new ArrayList<ParDeclOP>();
                                                                               RESULT.addAll(paramList);
                                                                               RESULT.add(param);
                                                                             
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NonEmptyParamDeclList",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ParDecl ::= Type IdList 
            {
              ParDeclOP RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		TypeOP type = (TypeOP)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int idListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<Identifier> idList = (ArrayList<Identifier>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ParDeclOP(false, type, idList); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ParDecl",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ParDecl ::= OUT Type IdList 
            {
              ParDeclOP RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		TypeOP type = (TypeOP)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int idListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<Identifier> idList = (ArrayList<Identifier>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ParDeclOP(true, type, idList); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ParDecl",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // VarDeclList ::= 
            {
              ArrayList<VarDeclOP> RESULT =null;
		 RESULT = new ArrayList<VarDeclOP>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VarDeclList",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // VarDeclList ::= VarDecl VarDeclList 
            {
              ArrayList<VarDeclOP> RESULT =null;
		int varDeclleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int varDeclright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		VarDeclOP varDecl = (VarDeclOP)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int varDeclListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int varDeclListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<VarDeclOP> varDeclList = (ArrayList<VarDeclOP>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                                          RESULT = new ArrayList<VarDeclOP>();
                                                          RESULT.add(varDecl);
                                                          RESULT.addAll(varDeclList);
                                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VarDeclList",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // StatList ::= Stat 
            {
              ArrayList<Statement> RESULT =null;
		int statleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int statright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement stat = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                          RESULT = new ArrayList<Statement>();
                          stat.setLine(statleft);
                          RESULT.add(stat);
                       
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("StatList",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // StatList ::= Stat StatList 
            {
              ArrayList<Statement> RESULT =null;
		int statleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int statright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Statement stat = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int statListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int statListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<Statement> statList = (ArrayList<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ArrayList<Statement>();
                                            RESULT.add(stat);
                                            stat.setLine(statleft);
                                            RESULT.addAll(statList);
                                         
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("StatList",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Stat ::= IfStat 
            {
              Statement RESULT =null;
		int ifStatleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ifStatright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		IfStatOP ifStat = (IfStatOP)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = ifStat;
                          ifStat.setLine(ifStatleft);
                       
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stat",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Stat ::= ForStat 
            {
              Statement RESULT =null;
		int forStatleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int forStatright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ForStatOP forStat = (ForStatOP)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                            RESULT = forStat;
                            forStat.setLine(forStatleft);
                         
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stat",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Stat ::= ReadStat SEMI 
            {
              Statement RESULT =null;
		int readStatleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int readStatright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ReadStatOP readStat = (ReadStatOP)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = readStat;
                                   readStat.setLine(readStatleft);
                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stat",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Stat ::= WriteStat SEMI 
            {
              Statement RESULT =null;
		int writeStatleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int writeStatright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		WriteStatOP writeStat = (WriteStatOP)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = writeStat;
                                     writeStat.setLine(writeStatleft);
                                  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stat",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Stat ::= AssignStat SEMI 
            {
              Statement RESULT =null;
		int assignStatleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int assignStatright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		AssignStatOP assignStat = (AssignStatOP)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = assignStat;
                                       assignStat.setLine(assignStatleft);
                                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stat",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Stat ::= WhileStat 
            {
              Statement RESULT =null;
		int whileStatleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int whileStatright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		WhileStatOP whileStat = (WhileStatOP)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = whileStat;
                                whileStat.setLine(whileStatleft);
                             
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stat",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Stat ::= FunCallStat SEMI 
            {
              Statement RESULT =null;
		int funcallleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int funcallright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		FunCallStatOP funcall = (FunCallStatOP)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = funcall;
                                     funcall.setLine(funcallleft);
                                  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stat",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Stat ::= RETURN Expr SEMI 
            {
              Statement RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ExprOP expr = (ExprOP)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new ReturnOP(expr);
                                  expr.setLine(exprleft);
                               
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stat",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Stat ::= RETURN SEMI 
            {
              Statement RESULT =null;
		 RESULT = new ReturnOP(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stat",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // IfStat ::= IF Expr THEN Body Else 
            {
              IfStatOP RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		ExprOP expr = (ExprOP)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		BodyOP body = (BodyOP)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int elseBodyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int elseBodyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ElseOP elseBody = (ElseOP)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                                        RESULT = new IfStatOP(expr, body, elseBody);
                                                        expr.setLine(exprleft);
                                                     
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IfStat",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Else ::= 
            {
              ElseOP RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Else",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Else ::= ELSE Body 
            {
              ElseOP RESULT =null;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		BodyOP body = (BodyOP)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ElseOP(body); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Else",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // WhileStat ::= WHILE Expr LOOP Body 
            {
              WhileStatOP RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ExprOP expr = (ExprOP)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		BodyOP body = (BodyOP)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                                RESULT = new WhileStatOP(expr, body);
                                                expr.setLine(exprleft);
                                             
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("WhileStat",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // ForStat ::= FOR ID ASSIGN Expr TO Expr LOOP Body 
            {
              ForStatOP RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		int id = (int)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		ExprOP e1 = (ExprOP)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ExprOP e2 = (ExprOP)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		BodyOP body = (BodyOP)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ForStatOP(new Identifier(id), e1, e2, body); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ForStat",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // ReadStat ::= IdList READ STRING_CONST 
            {
              ReadStatOP RESULT =null;
		int idListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList<Identifier> idList = (ArrayList<Identifier>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ReadStatOP(idList, new StringConst(s)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ReadStat",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // ReadStat ::= IdList READ 
            {
              ReadStatOP RESULT =null;
		int idListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList<Identifier> idList = (ArrayList<Identifier>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new ReadStatOP(idList); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ReadStat",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // IdList ::= ID 
            {
              ArrayList<Identifier> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		int id = (int)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ArrayList<Identifier>();
                    Identifier identifier = new Identifier(id);
                    identifier.setLine(idleft);
                    RESULT.add(identifier);
                 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IdList",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // IdList ::= IdList COMMA ID 
            {
              ArrayList<Identifier> RESULT =null;
		int idListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList<Identifier> idList = (ArrayList<Identifier>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		int id = (int)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ArrayList<Identifier>();
                                        Identifier identifier = new Identifier(id);
                                        identifier.setLine(idleft);
                                        RESULT.addAll(idList);
                                        RESULT.add(identifier);
                                     
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IdList",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // WriteStat ::= LPAR ExprList RPAR WRITE 
            {
              WriteStatOP RESULT =null;
		int exprListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exprListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList<ExprOP> exprList = (ArrayList<ExprOP>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new WriteStatOP(exprList, "write"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("WriteStat",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // WriteStat ::= LPAR ExprList RPAR WRITELN 
            {
              WriteStatOP RESULT =null;
		int exprListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exprListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList<ExprOP> exprList = (ArrayList<ExprOP>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new WriteStatOP(exprList, "writeln"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("WriteStat",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // AssignStat ::= IdList ASSIGN ExprList 
            {
              AssignStatOP RESULT =null;
		int idListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList<Identifier> idList = (ArrayList<Identifier>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int exprListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exprListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<ExprOP> exprList = (ArrayList<ExprOP>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new AssignStatOP(idList, exprList); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AssignStat",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // FunCallStat ::= ID LPAR ExprList RPAR 
            {
              FunCallStatOP RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		int id = (int)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int exprListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int exprListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList<ExprOP> exprList = (ArrayList<ExprOP>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new FunCallStatOP(new Identifier(id), exprList); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FunCallStat",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // FunCallStat ::= ID LPAR RPAR 
            {
              FunCallStatOP RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		int id = (int)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new FunCallStatOP(new Identifier(id)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FunCallStat",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // FunCallExpr ::= ID LPAR ExprList RPAR 
            {
              FunCallExprOP RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		int id = (int)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int exprListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int exprListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList<ExprOP> exprList = (ArrayList<ExprOP>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                                                    RESULT = new FunCallExprOP(new Identifier(id), exprList);
                                                  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FunCallExpr",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // FunCallExpr ::= ID LPAR RPAR 
            {
              FunCallExprOP RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		int id = (int)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new FunCallExprOP(new Identifier(id)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FunCallExpr",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // ExprList ::= Expr 
            {
              ArrayList<ExprOP> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExprOP e = (ExprOP)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 e.setLine(eleft);
                       RESULT = new ArrayList<ExprOP>();
                       RESULT.add(e);
                     
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExprList",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // ExprList ::= Expr COMMA ExprList 
            {
              ArrayList<ExprOP> RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ExprOP expr = (ExprOP)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int exprListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exprListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<ExprOP> exprList = (ArrayList<ExprOP>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 expr.setLine(exprleft);
                                                  RESULT = new ArrayList<ExprOP>();
                                                  RESULT.add(expr);
                                                  RESULT.addAll(exprList);
                                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExprList",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Expr ::= Const 
            {
              ExprOP RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AbstractConst c = (AbstractConst)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = c; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Expr ::= ID 
            {
              ExprOP RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		int id = (int)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Identifier(id); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Expr ::= FunCallExpr 
            {
              ExprOP RESULT =null;
		int fcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		FunCallExprOP fc = (FunCallExprOP)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 fc.setLine(fcleft); RESULT = fc; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Expr ::= Expr PLUS Expr 
            {
              ExprOP RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ExprOP e1 = (ExprOP)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExprOP e2 = (ExprOP)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 e1.setLine(e1left); e2.setLine(e2left); RESULT = new PlusOP(e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Expr ::= Expr MINUS Expr 
            {
              ExprOP RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ExprOP e1 = (ExprOP)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExprOP e2 = (ExprOP)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 e1.setLine(e1left); e2.setLine(e2left); RESULT = new MinusOP(e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Expr ::= Expr TIMES Expr 
            {
              ExprOP RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ExprOP e1 = (ExprOP)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExprOP e2 = (ExprOP)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 e1.setLine(e1left); e2.setLine(e2left); RESULT = new TimesOP(e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Expr ::= Expr DIV Expr 
            {
              ExprOP RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ExprOP e1 = (ExprOP)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExprOP e2 = (ExprOP)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 e1.setLine(e1left); e2.setLine(e2left); RESULT = new DivOP(e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Expr ::= Expr AND Expr 
            {
              ExprOP RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ExprOP e1 = (ExprOP)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExprOP e2 = (ExprOP)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 e1.setLine(e1left); e2.setLine(e2left); RESULT = new AndOP(e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // Expr ::= Expr OR Expr 
            {
              ExprOP RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ExprOP e1 = (ExprOP)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExprOP e2 = (ExprOP)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 e1.setLine(e1left); e2.setLine(e2left); RESULT = new OrOP(e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // Expr ::= Expr STR_CONCAT Expr 
            {
              ExprOP RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ExprOP e1 = (ExprOP)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExprOP e2 = (ExprOP)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                        e1.setLine(e1left);
                                        e2.setLine(e2left);
                                        RESULT = new StringConcatOP(e1, e2);
                                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // Expr ::= Expr POW Expr 
            {
              ExprOP RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ExprOP e1 = (ExprOP)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExprOP e2 = (ExprOP)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 e1.setLine(e1left); e2.setLine(e2left); RESULT = new PowOP(e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // Expr ::= Expr GT Expr 
            {
              ExprOP RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ExprOP e1 = (ExprOP)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExprOP e2 = (ExprOP)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 e1.setLine(e1left); e2.setLine(e2left); RESULT = new GTOP(e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // Expr ::= Expr GE Expr 
            {
              ExprOP RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ExprOP e1 = (ExprOP)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExprOP e2 = (ExprOP)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 e1.setLine(e1left); e2.setLine(e2left); RESULT = new GEOP(e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // Expr ::= Expr LT Expr 
            {
              ExprOP RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ExprOP e1 = (ExprOP)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExprOP e2 = (ExprOP)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 e1.setLine(e1left); e2.setLine(e2left); RESULT = new LTOP(e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // Expr ::= Expr LE Expr 
            {
              ExprOP RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ExprOP e1 = (ExprOP)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExprOP e2 = (ExprOP)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 e1.setLine(e1left); e2.setLine(e2left); RESULT = new LEOP(e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // Expr ::= Expr EQ Expr 
            {
              ExprOP RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ExprOP e1 = (ExprOP)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExprOP e2 = (ExprOP)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 e1.setLine(e1left); e2.setLine(e2left); RESULT = new EQOP(e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // Expr ::= Expr NE Expr 
            {
              ExprOP RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ExprOP e1 = (ExprOP)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExprOP e2 = (ExprOP)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 e1.setLine(e1left); e2.setLine(e2left); RESULT = new NEOP(e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // Expr ::= MINUS Expr 
            {
              ExprOP RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExprOP e = (ExprOP)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 e.setLine(eleft); RESULT = new UminusOP(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // Expr ::= NOT Expr 
            {
              ExprOP RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExprOP e = (ExprOP)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 e.setLine(eleft); RESULT = new NotOP(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // Expr ::= LPAR Expr RPAR 
            {
              ExprOP RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ExprOP e = (ExprOP)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 e.setLine(eleft); RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
